<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{DB368528-BCD9-4678-B161-25567654E18D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Redcat.Core.Tests</RootNamespace>
    <AssemblyName>Redcat.Core.Tests</AssemblyName>
    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="FakeItEasy, Version=1.25.3.0, Culture=neutral, PublicKeyToken=eff28e2146d5fd2c, processorArchitecture=MSIL">
      <HintPath>..\..\packages\FakeItEasy.1.25.3\lib\net40\FakeItEasy.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="nunit.framework, Version=2.6.4.14350, Culture=neutral, PublicKeyToken=96d09a1eb7f44a77, processorArchitecture=MSIL">
      <HintPath>..\..\packages\NUnit.2.6.4\lib\nunit.framework.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="xunit.abstractions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c, processorArchitecture=MSIL">
      <HintPath>..\..\packages\xunit.abstractions.2.0.0\lib\net35\xunit.abstractions.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="xunit.assert, Version=2.1.0.3179, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c, processorArchitecture=MSIL">
      <HintPath>..\..\packages\xunit.assert.2.1.0\lib\portable-net45+win8+wp8+wpa81\xunit.assert.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="xunit.core, Version=2.1.0.3179, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c, processorArchitecture=MSIL">
      <HintPath>..\..\packages\xunit.extensibility.core.2.1.0\lib\portable-net45+win8+wp8+wpa81\xunit.core.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="xunit.execution.desktop, Version=2.1.0.3179, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c, processorArchitecture=MSIL">
      <HintPath>..\..\packages\xunit.extensibility.execution.2.1.0\lib\net45\xunit.execution.desktop.dll</HintPath>
      <Private>True</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="CommandProcessorTests.cs" />
    <Compile Include="CommunicatorTests.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="PropertySetTests.cs" />
    <Compile Include="Communication\ChannelManagerTests.cs" />
    <Compile Include="Communication\MessageDispatcherTests.cs" />
    <Compile Include="Service\ActivatorUtilitiesTests.cs" />
    <Compile Include="Service\AllContainerTestsBase.cs" />
    <Compile Include="Service\AutofacContainerTests.cs" />
    <Compile Include="Service\CallSiteTests.cs" />
    <Compile Include="Service\CircularDependencyTests.cs" />
    <Compile Include="Service\Fakes\AbstractClass.cs" />
    <Compile Include="Service\Fakes\AnotherClass.cs" />
    <Compile Include="Service\Fakes\AnotherClassAcceptingData.cs" />
    <Compile Include="Service\Fakes\CircularReferences\CircularDependencyGeneric.cs" />
    <Compile Include="Service\Fakes\CircularReferences\DirectCircularDependencyA.cs" />
    <Compile Include="Service\Fakes\CircularReferences\DirectCircularDependencyB.cs" />
    <Compile Include="Service\Fakes\CircularReferences\IndirectCircularDependencyA.cs" />
    <Compile Include="Service\Fakes\CircularReferences\IndirectCircularDependencyB.cs" />
    <Compile Include="Service\Fakes\CircularReferences\IndirectCircularDependencyC.cs" />
    <Compile Include="Service\Fakes\CircularReferences\ISelfCircularDependencyWithInterface.cs" />
    <Compile Include="Service\Fakes\CircularReferences\NoCircularDependencySameTypeMultipleTimesA.cs" />
    <Compile Include="Service\Fakes\CircularReferences\NoCircularDependencySameTypeMultipleTimesB.cs" />
    <Compile Include="Service\Fakes\CircularReferences\NoCircularDependencySameTypeMultipleTimesC.cs" />
    <Compile Include="Service\Fakes\CircularReferences\SelfCircularDependency.cs" />
    <Compile Include="Service\Fakes\CircularReferences\SelfCircularDependencyGeneric.cs" />
    <Compile Include="Service\Fakes\CircularReferences\SelfCircularDependencyWithInterface.cs" />
    <Compile Include="Service\Fakes\ClassWithAmbiguousCtors.cs" />
    <Compile Include="Service\Fakes\ClassWithInternalConstructor.cs" />
    <Compile Include="Service\Fakes\ClassWithNestedReferencesToProvider.cs" />
    <Compile Include="Service\Fakes\ClassWithOptionalArgsCtor.cs" />
    <Compile Include="Service\Fakes\ClassWithPrivateCtor.cs" />
    <Compile Include="Service\Fakes\ClassWithProtectedConstructor.cs" />
    <Compile Include="Service\Fakes\ClassWithStaticCtor.cs" />
    <Compile Include="Service\Fakes\ClassWithThrowingCtor.cs" />
    <Compile Include="Service\Fakes\ClassWithThrowingEmptyCtor.cs" />
    <Compile Include="Service\Fakes\CreationCountFakeService.cs" />
    <Compile Include="Service\Fakes\DependOnNonexistentService.cs" />
    <Compile Include="Service\Fakes\DependsOnServiceWithoutImplementation.cs" />
    <Compile Include="Service\Fakes\FakeOpenGenericService.cs" />
    <Compile Include="Service\Fakes\FakeOuterService.cs" />
    <Compile Include="Service\Fakes\FakeService.cs" />
    <Compile Include="Service\Fakes\IDependOnNonexistentService.cs" />
    <Compile Include="Service\Fakes\IFactoryService.cs" />
    <Compile Include="Service\Fakes\IFakeEveryService.cs" />
    <Compile Include="Service\Fakes\IFakeMultipleService.cs" />
    <Compile Include="Service\Fakes\IFakeOpenGenericService.cs" />
    <Compile Include="Service\Fakes\IFakeOuterService.cs" />
    <Compile Include="Service\Fakes\IFakeScopedService.cs" />
    <Compile Include="Service\Fakes\IFakeService.cs" />
    <Compile Include="Service\Fakes\IFakeServiceInstance.cs" />
    <Compile Include="Service\Fakes\IFakeSingletonService.cs" />
    <Compile Include="Service\Fakes\INonexistentService.cs" />
    <Compile Include="Service\Fakes\IServiceWithoutImplementation.cs" />
    <Compile Include="Service\Fakes\ScopedFactoryService.cs" />
    <Compile Include="Service\Fakes\ServiceAcceptingFactoryService.cs" />
    <Compile Include="Service\Fakes\TestServices.cs" />
    <Compile Include="Service\Fakes\TransientFactoryService.cs" />
    <Compile Include="Service\ScopingContainerTestBase.cs" />
    <Compile Include="Service\ServiceCollectionExtensionTest.cs" />
    <Compile Include="Service\ServiceCollectionTests.cs" />
    <Compile Include="Service\ServiceLookup\ServiceTest.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithDefaultConstructorParameters.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithEnumerableConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithGenericServices.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithMultipleParameterizedConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithNoConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithNonOverlappedConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithNoPublicConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithParameterizedAndNullaryConstructor.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithParameterizedConstructor.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithParameterlessConstructor.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithParameterlessPublicConstructor.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithSupersetConstructors.cs" />
    <Compile Include="Service\ServiceLookup\Types\TypeWithUnresolvableEnumerableConstructors.cs" />
    <Compile Include="Service\ServiceProviderContainerTests.cs" />
    <Compile Include="Service\ServiceProviderExtensionsTest.cs" />
    <Compile Include="Service\ServiceTableTest.cs" />
    <Compile Include="Service\Utils\MultiServiceHelpers.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <Service Include="{82A7F48D-3B50-4B1E-B82E-3ADA8210C358}" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\Sources\Core\Redcat.Core.csproj">
      <Project>{5ea90f4a-92f4-4b98-b669-866460de26a0}</Project>
      <Name>Redcat.Core</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>